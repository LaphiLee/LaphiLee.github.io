<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laphi Lee&#39;s Blog</title>
  
  <subtitle>生活、技术个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.laphilee.com/"/>
  <updated>2017-10-25T07:40:25.000Z</updated>
  <id>http://www.laphilee.com/</id>
  
  <author>
    <name>Laphi Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java事件机制浅析</title>
    <link href="http://www.laphilee.com/Java-event.html"/>
    <id>http://www.laphilee.com/Java-event.html</id>
    <published>2017-10-25T07:26:32.000Z</published>
    <updated>2017-10-25T07:40:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java事件机制浅析">Java事件机制浅析</h1><p>Java的事件机制最初是用在Swing组件上的，用来处理诸如按钮按下之类的动作事件，但如果理解了事件机制的基本概念，我们可以轻易的将其用到任何Java对象上。</p><h2 id="基本概念">基本概念</h2><ul><li>事件</li></ul><p>　　事件可以是系统中发生的任何动作。 　　当一个事件发生时，该事件用一个事件对象来表示。事件对象有对应的事件类。</p><a id="more"></a><ul><li>事件源</li></ul><p>　　事件最初发生的地方。</p><ul><li>事件处理器（事件处理方法）</li></ul><p>　　事件处理器是一个接收事件对象并进行相应处理的方法。事件处理器包含在一个类中，这个类的对象负责检查事件是否发生，若发生就激活事件处理器进行处理。</p><ul><li>注册事件监听器</li></ul><p>　　为了能够让事件监听器检查事件源是否发生了某些事件，并且在发生时激活事件处理器进行相应的处理，必须在事件源上注册事件监听器。</p><h2 id="实现java事件机制">实现Java事件机制</h2><blockquote><p>先介绍下Java中和事件处理相关的几个类，然后我们通过一个简单的实例来详细了解。</p></blockquote><h3 id="涉及到的java类">涉及到的Java类</h3><p>Java的事件机制一般包括三个部分：<code>EventObject</code>，<code>EventListener</code>和<code>Source</code>。</p><ul><li><code>EventObject</code></li></ul><p><code>java.util.EventObject</code>是事件状态对象的基类，它封装了事件源对象以及和事件相关的信息。所有java的事件类都需要继承该类。</p><ul><li><code>EventListener</code></li></ul><p><code>java.util.EventListener</code>是一个标记接口，就是说该接口内是没有任何方法的。所有事件监听器都需要实现该接口。事件监听器注册在事件源上，当事件源的属性或状态改变的时候，调用相应监听器内的回调方法。</p><ul><li><code>Source</code></li></ul><p>事件源不需要实现或继承任何接口或类，它是事件最初发生的地方。因为事件源需要注册事件监听器，所以事件源内需要有相应的盛放事件监听器的容器。</p><h3 id="实例">实例</h3><p><strong>事件对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.EventObject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sourceState;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(source);<span class="comment">//source为实际的事件对象(数据)</span></div><div class="line">        sourceState = ((Source)source).getFlag();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSourceState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sourceState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>事件监听器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.EventListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateChangeListener</span> <span class="keyword">implements</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"触发状态改变事件。。。"</span>);</div><div class="line">        System.out.println(<span class="string">"当前事件源状态为："</span> + event.getSourceState());</div><div class="line">        System.out.println(<span class="string">"。。。。。。。。。。。。。。。。。。。。。。。"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.EventListener;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateChangeToOneListener</span> <span class="keyword">implements</span> <span class="title">EventListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"触发状态变为1的事件。。。"</span>);</div><div class="line">        System.out.println(<span class="string">"当前事件源状态为："</span> + event.getSourceState());</div><div class="line">        System.out.println(<span class="string">"。。。。。。。。。。。。。。。。。。。。。。。"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>事件源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.EventListener;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">    Set&lt;EventListener&gt; listeners = <span class="keyword">new</span> HashSet&lt;EventListener&gt;();</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">     * 注册事件监听器</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> listener</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(EventListener listener)</span> </span>&#123;</div><div class="line">        listeners.add(listener);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当事件发生时，通知注册在事件源上的所有事件做出相应的反映</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (EventListener listener : listeners) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ((StateChangeListener)listener).handleEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">                    ((StateChangeToOneListener)listener).handleEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 改变状态</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeFlag</span><span class="params">()</span> </span>&#123;</div><div class="line">        flag = (flag == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">        notifyListener();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlag</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> flag;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        </div><div class="line">        Source source = <span class="keyword">new</span> Source();</div><div class="line">        source.addListener(<span class="keyword">new</span> StateChangeListener());</div><div class="line">        source.addListener(<span class="keyword">new</span> StateChangeToOneListener());</div><div class="line">        </div><div class="line">        source.changeFlag();</div><div class="line">        System.out.println(<span class="string">"————————————————————————"</span>);</div><div class="line">        source.changeFlag();</div><div class="line">        System.out.println(<span class="string">"～～～～～～～～～～～～～"</span>);</div><div class="line">        source.changeFlag();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java事件机制浅析&quot;&gt;Java事件机制浅析&lt;/h1&gt;
&lt;p&gt;Java的事件机制最初是用在Swing组件上的，用来处理诸如按钮按下之类的动作事件，但如果理解了事件机制的基本概念，我们可以轻易的将其用到任何Java对象上。&lt;/p&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　事件可以是系统中发生的任何动作。 　　当一个事件发生时，该事件用一个事件对象来表示。事件对象有对应的事件类。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.laphilee.com/categories/technology/"/>
    
    
      <category term="Java Core" scheme="http://www.laphilee.com/tags/Java-Core/"/>
    
      <category term="Java事件机制" scheme="http://www.laphilee.com/tags/Java%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    
      <category term="swing" scheme="http://www.laphilee.com/tags/swing/"/>
    
  </entry>
  
  <entry>
    <title>Java异常处理体系详解</title>
    <link href="http://www.laphilee.com/Java-Exception.html"/>
    <id>http://www.laphilee.com/Java-Exception.html</id>
    <published>2017-09-14T13:21:06.000Z</published>
    <updated>2017-09-22T09:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java异常处理体系详解">Java异常处理体系详解</h1><blockquote><p><em>异常</em>指程序中不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。在Java中异常被当作是对象处理，所有的异常都基于一个超类：<code>Throwable</code>。本文主要讲解Java语言中的异常处理体系。</p></blockquote><h2 id="java异常处理体系">Java异常处理体系</h2><p>Java中所有的异常都始于一个基类<code>Throwable</code>。我们就从<code>Throwable</code>讲起。</p><h3 id="throwable中的常用方法">Throwable中的常用方法</h3><p><code>Throwable</code>中定义了一些公共的方法，所有的异常类都可以使用。其中常用的方法：</p><a id="more"></a><ul><li><code>getCause()</code>：返回抛出异常的原因。如果 cause 不存在或未知，则返回 null。</li><li><code>getMessage()</code>：返回异常的消息信息。</li><li><code>printStackTrace()</code>：对象的堆栈跟踪输出至错误输出流，作为字段<code>System.err</code>的值。</li></ul><p>这些方法用于发生异常时获取异常和堆栈信息，帮助我们快速的定位排查问题。</p><h3 id="java异常体系结构">Java异常体系结构</h3><p>Java中的所有异常（各种<code>Exception</code>，<code>Error</code>）都是<code>java.lang.Throwable</code>超类的子类。这些异常分为两大类：<code>Error</code>和<code>Exception</code>。</p><p><code>Error</code>是程序无法处理的错误，表示程序运行期间发生较严重的问题。比如<code>OutOfMemoryError</code>、<code>ThreadDeath</code>等。这些异常发生时， Java虚拟机（JVM）一般会选择线程终止。</p><p><code>Exception</code>是程序本身可以处理的异常，这种异常分两大类<em>运行时异常</em>和<em>非运行时异常</em>。 程序中应当尽可能去处理这些异常。</p><h4 id="运行时异常">运行时异常</h4><p><em>运行时异常</em>都是<code>RuntimeException</code>类及其子类异常，如 <code>NullPointerException</code>、 <code>IndexOutOfBoundsException</code> 等，这些异常是<strong><em>非检查异常</em></strong>，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><h4 id="非运行时异常">非运行时异常</h4><p><em>非运行时异常</em>是<strong><code>RuntimeException</code>以外的异常</strong>，类型上都属于<code>Exception</code>类及其子类。 从程序语法角度讲是<strong>必须进行处理的异常</strong>，属于<strong><em>检查异常</em></strong>。如果不处理，程序就不能编译通过。 如<code>IOException</code>、<code>SQLException</code>等以及用户自定义的<code>Exception</code>异常，一般情况下不自定义检查异常。</p><h4 id="java整个异常体系结构图">Java整个异常体系结构图</h4><p>如下，笔者整理了Java（基于jdk1.8）的整个异常体系结构，谨供读者参考。</p><div class="figure"><img src="http://ow9wx6njf.bkt.clouddn.com/Throwable.png" alt="Java异常体系"><p class="caption">Java异常体系</p></div><h3 id="java异常处理机制">Java异常处理机制</h3><p>在Java程序中，异常处理有两种机制：<strong>抛出异常</strong>、<strong>捕获异常</strong>。<strong><em>检查异常</em></strong>必须在程序中处理；<strong><em>非检查异常</em></strong>，程序中可以选择捕获处理，也可以不处理。</p><h4 id="抛出异常"><strong>抛出异常</strong></h4><p>Java中我们通过<code>throw</code>、<code>throws</code>关键字来抛出异常。</p><ul><li><p><code>throw</code>关键字用于方法体内部，抛出一个<code>Throwable</code>类型的异常。如果抛出了检查异常， 则还应该在方法头部声明方法可能抛出的异常类型。该方法的调用者也必须检查处理抛出的异常。 如果所有方法都层层上抛获取的异常，最终JVM会进行处理，处理也很简单，就是打印异常消息和堆栈信息。 如果抛出的是<code>Error</code>或<code>RuntimeException</code>，则该方法的调用者可选择处理该异常。</p></li><li><p><code>throws</code>关键字用于方法体外部的方法声明部分，用来声明方法可能会抛出某些异常。仅当抛出了检查异常， 该方法的调用者才必须处理或者重新抛出该异常。当方法的调用者无力处理该异常的时候，应该继续抛出， 而不是囫囵吞枣一般在<code>catch</code>块中打印一下堆栈信息做个勉强处理。</p></li></ul><h4 id="捕获异常"><strong>捕获异常</strong></h4><p>捕获异常用<code>try</code>、<code>catch</code>、<code>finally</code>关键字。</p><ol style="list-style-type: decimal"><li><p><code>try</code>、<code>catch</code>、<code>finally</code>三个语句块均不能单独使用，三者可以组成 <code>try...catch...finally</code>、 <code>try...catch</code>、 <code>try...finally</code>三种结构，<code>catch</code>语句可以有一个或多个，<code>finally</code>语句最多一个。</p></li><li><p><code>try</code>、<code>catch</code>、<code>finally</code>三个代码块中变量的作用域为代码块内部，分别独立而不能相互访问。 如果要在三个块中都可以访问，则需要将变量定义到这些块的外面。</p></li><li><p>多个<code>catch</code>块时候，其参数类型必须按照从子类到父类顺序由上到下，否则会导致捕获的异常不够精确。因为<code>catch</code>一旦匹配到一个类型，就会忽略往后的<code>catch</code>。比如<code>IOException</code>必须放到<code>Exception</code>前面，否则编译器会报错。</p></li></ol><p><em>小技巧</em>：</p><p>因为<code>finally</code>代码块每次都要执行，我们通常会在<code>finally</code>中写一些清理资源的代码，但有时候这样写会有一些问题。比如：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BufferedReader in;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName));</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">      <span class="comment">//文件没找到异常</span></div><div class="line">        <span class="keyword">throw</span>  e;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">//如果成功打开文件，此时才需要关闭文件</span></div><div class="line">            in.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span>  e;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="comment">//不要在这里关闭文件，因为有可能这个文件根本就没有打开</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最安全的方法是实用嵌套的<code>try</code>子句。如下：</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BufferedReader in;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputFile</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(fileName));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String s;</div><div class="line">            <span class="keyword">while</span> ((s = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//do something</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//只有成功打开的文件才需要关闭</span></div><div class="line">            in.close();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">      <span class="comment">//此时只要处理找不到文件异常即可</span></div><div class="line">        <span class="keyword">throw</span>  e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="引申">引申</h4><ul><li><p>若一段代码前有异常抛出，并且这个异常没有被捕获，这段代码将产生编译时错误「无法访问的语句」。</p></li><li><p>若一段代码前有异常抛出，并且这个异常被<code>try...catch</code>所捕获，若此时<code>catch</code>语句中没有抛出新的异常，则这段代码能够被执行，否则，同第上一条。</p></li><li><p>若在一个条件语句中抛出异常，则程序能被编译，但后面的语句不会被执行。</p></li></ul><h4 id="关于finally">关于<code>finally</code></h4><ul><li><code>finally</code>中的代码总是会被执行，除非在执行<code>try</code>或者<code>catch</code>语句时虚拟机退出（<code>System.exit(1)</code>)。</li><li><code>finally</code>块可以做一些资源清理工作，如关闭文件、关闭游标等操作。</li><li><code>finally</code>块不是必须的。</li><li>如果在<code>try</code>和<code>finally</code>块中都执行了<code>return</code>语句，最终返回的将是<code>finally</code>中的<code>return</code>值。</li></ul><h3 id="异常处理的一般原则">异常处理的一般原则</h3><ol style="list-style-type: decimal"><li>在知道该如何处理的情况下尽早捕获异常。否则继续向上抛出或者转译为<code>RuntimeException</code>——避免抛出过多的异常，影响程序可读性。</li><li>自定义非检查型异常（<code>RuntimeException</code>），用以封装所有的检查型异常——让程序决定是否对异常进行处理，防止<strong><em>吞食则有害</em></strong>问题的发生。</li><li>只针对异常的情况才使用异常。不要滥用<code>try-catch</code>，因为会影响性能。</li><li>为应用系统定义一套属于自己的异常处理框架。这样当异常发生时，才能将异常信息以统一的风格、优雅的反馈给用户。</li></ol><h3 id="异常的转译">异常的转译</h3><p>如果方法抛出的异常与它执行的任务没有明显的联系，这种情形会使人不知所措。为了避免这个问题，更高层的实现应该捕获低层的异常，同时抛出可以按照高层抽象进行解释的异常，这种做法被称为<strong>异常转译</strong>（exception translation），如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">// use lower-level abstraction to do our bidding</span></div><div class="line">&#125; <span class="keyword">catch</span>(LowerLevelException ex)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HigherLevelException(...);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="异常转译的哲学">异常转译的哲学</h4><p><strong>异常转译</strong>是针对所有继承<code>Throwable</code>超类的类而言的，从语法角度讲，其子类之间都可以相互转换。 但是从设计的角度出发，对于异常转译，我们要有一个合理的转译规则，否则各种异常互相转译必然导致代码混乱不堪。笔者认为，一个合理的三大类异常（<code>Error</code>, <code>RuntimeException</code>, <code>非RuntimeException</code>）的转译关系如下图：</p><div class="figure"><img src="http://ow9wx6njf.bkt.clouddn.com/MyException.png" alt="异常转译"><p class="caption">异常转译</p></div><p>将<code>Error</code>和<em>检查型异常</em>（<code>非RuntimeException</code>）转译成<code>RuntimeException</code>是为了增加代码的可读性、挽回因错误（<code>Error</code>）发生带来的负面影响，使代码更为简洁，且有利于异常的统一处理。</p><h4 id="异常链">异常链</h4><p>异常的转译涉及到了<em>异常链</em>的概念。在捕获一个异常后，抛出另一个异常，把底层的异常信息传给上层，并且保留底层的异常信息，这就是<strong><em>异常链</em></strong>。JDK1.4以后，<code>Throwable</code>子类在构造器中可以接受一个<code>cause</code>对象(<code>Throwable</code>对象)作为参数，表示<em>原始异常</em>，通过<code>cause</code>参数把<em>原始异常</em>传递给新的上层异常。这样，位于高层的异常递归调用<code>getCause()</code>方法，就可以遍历各层的异常信息。</p><h2 id="设计自己的异常处理框架">设计自己的异常处理框架</h2><ul><li>对于一个应用系统来说，发生的所有异常在用户看来都是应用系统内部的异常。因此，系统内部的异常应该统一的转译成<code>AppAbstractException</code>（或是其他你喜欢的名字），<code>AppAbstractException</code>异常应该能够提供给客户端友好的异常信息。</li><li>自定义的异常都应该是<code>RuntimeException</code>（<em>非检查异常</em>）类的子类，以便由开发人员在合适的位置统一处理异常。</li></ul><div class="figure"><img src="http://ow9wx6njf.bkt.clouddn.com/AppException.png" alt="应用异常处理框架"><p class="caption">应用异常处理框架</p></div><p><strong><em>eg：</em></strong>Spring中的所有异常都可以用 <code>org.springframework.core.NestedRuntimeException</code> 来表示，并且该基类继承的是<code>RuntimeException</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java异常处理体系详解&quot;&gt;Java异常处理体系详解&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;异常&lt;/em&gt;指程序中不期而至的各种状况，如：文件找不到、网络连接失败、非法参数等。在Java中异常被当作是对象处理，所有的异常都基于一个超类：&lt;code&gt;Throwable&lt;/code&gt;。本文主要讲解Java语言中的异常处理体系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;java异常处理体系&quot;&gt;Java异常处理体系&lt;/h2&gt;
&lt;p&gt;Java中所有的异常都始于一个基类&lt;code&gt;Throwable&lt;/code&gt;。我们就从&lt;code&gt;Throwable&lt;/code&gt;讲起。&lt;/p&gt;
&lt;h3 id=&quot;throwable中的常用方法&quot;&gt;Throwable中的常用方法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Throwable&lt;/code&gt;中定义了一些公共的方法，所有的异常类都可以使用。其中常用的方法：&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.laphilee.com/categories/technology/"/>
    
    
      <category term="Java异常" scheme="http://www.laphilee.com/tags/Java%E5%BC%82%E5%B8%B8/"/>
    
      <category term="Exception" scheme="http://www.laphilee.com/tags/Exception/"/>
    
      <category term="Java异常体系" scheme="http://www.laphilee.com/tags/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/"/>
    
      <category term="Java Core" scheme="http://www.laphilee.com/tags/Java-Core/"/>
    
      <category term="异常框架设计" scheme="http://www.laphilee.com/tags/%E5%BC%82%E5%B8%B8%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX学习</title>
    <link href="http://www.laphilee.com/LaTeX.html"/>
    <id>http://www.laphilee.com/LaTeX.html</id>
    <published>2017-07-25T03:12:01.000Z</published>
    <updated>2017-09-14T06:40:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="latex学习">LaTeX学习</h1><p>如果你平时的写作中会遇到数学公式，而你又是使用的markdown编辑器，那么，本文适合你。</p><blockquote><p>本文主要介绍LaTex数学排版在MarkDown语法中的使用。如果您需要的是更详尽的LaTeX论文排版等，请查阅相关专业资料。</p></blockquote><p><em>TEX</em> 是Donald E. Knuth 编写的一个以排版文章及数学公式为目标的计算机程序。TEX的版本号不断趋近于<em>π</em>，现在为3.141592。由Pascal 语言写成，特点: <strong>免费、输出质量高、擅长科技排版、有点像编程</strong>。</p><p><em>LATEX</em> 目前使用最广泛的TEX 宏集。 每一个<em>LATEX</em> 命令实际上最后都会被转换解释成几个甚至上百个TEX命令。</p><a id="more"></a><p><em>CTEX</em> 国内致力于TEX 推广的网站：<a href="http://www.ctex.org/" target="_blank" rel="external">www.ctex.org/</a>。该网站提供了<em>CTEX</em> 中文套装，这个安装程序把<em>MiKTEX</em>（<em>TEX</em> 在Windows 操作系统上的实现版本）和一些相关工具（如<em>WinEdt</em>、<em>GSview</em> 等）打包在一起，同时对中文接口进行了配置，以实现对中文文本的编辑。</p><p>如果想学习<em>LATEX</em>安装<em>CTEX</em>套装就可以了。<em>LATEX</em> 的功能和宏包有很多，每个人用到的功能是有限的；边用边学，建立了基本的概念以后，在使用中根据需求去解决问题就可以了。</p><h2 id="latex公式基础知识">LaTeX公式基础知识</h2><ul><li><em>LATEX</em>控制序列的概念（类似于函数）</li></ul><p>控制序列可以是作为命令：以<code>\</code>开头，参数：必须参数<code>{}</code>和可选参数<code>[]</code>。</p><ul><li>环境概念 </li></ul><p>以<code>bengin {环境名}</code>开始，并以<code>end {环境名}</code>结束。</p><ul><li><em>LaTeX</em> 公式有两种，一种是用在正文中的，一种是单独显示的。正文中的公式用 <code>$...$</code> 来定义，单独显示的用<code>$$...$$</code> 来定义，其中 <code>...</code> 表示的是<em>LaTeX</em> 的公式命令。</li></ul><p><em>行内公式：</em></p><p><code>$f(x) = \sum_{i=0}^{N}\int_{a}^{b} g(t,i) \text{ d}t$.</code>(行内公式)</p><p><span class="math inline">\(f(x) = \sum_{i=0}^{N}\int_{a}^{b} g(t,i) \text{ d}t\)</span></p><p>​ <em>行间公式：</em></p><p><code>$$f(x) = \sum_{i=0}^{N}\int_{a}^{b} g(t,i) \text{ d}t{6}\tag{1}$$</code> <span class="math display">\[f(x) = \sum_{i=0}^{N}\int_{a}^{b} g(t,i) \text{ d}t{6}\tag{1}\]</span></p><ul><li>上标与下标</li></ul><p>上标命令是 <code>^{角标}</code>，下标命令是<code>_{角标}</code>。当角标是单个字符时可以不用花括号</p><ul><li>分式</li></ul><p>输入较短的分式时，最简单的方法是使用斜线，譬如输入<code>(x+y)/2</code>，可得到：<span class="math inline">\((x + y)/2\)</span></p><p>要输入带有水平分数线的公式，可用命令：<code>\frac{分子}{分母}</code>。</p><p><em>eg.</em></p><p><code>$$\frac{x+y}{2}$$</code> <span class="math display">\[\frac{x+y}{2}\]</span></p><p><code>$$\frac{1}{1+\frac{1}{2}}$$</code> <span class="math display">\[\frac{1}{1+\frac{1}{2}}\]</span></p><ul><li>根式</li></ul><p>排版根式的命令是：开平方：<code>\sqrt{表达式}</code>；开 n 次方：<code>\sqrt[n]{表达式}</code></p><p><code>$$\sqrt{2}&lt;\sqrt[3]{3}$$</code> <span class="math display">\[\sqrt{2}&lt;\sqrt[3]{3}\]</span></p><p><code>$$\sqrt{1+\sqrt[p]{1+a^2}}$$</code> <span class="math display">\[\sqrt{1+\sqrt[p]{1+a^2}}\]</span></p><p><code>$$\sqrt{1+\sqrt[^p\!]{1+a^2}}$$</code> <span class="math display">\[\sqrt{1+\sqrt[^p\!]{1+a^2}}\]</span></p><ul><li>求和与积分</li></ul><p>排版求和符号与积分符号的命令分别为 <code>\sum</code>和 <code>\int</code>，它们通常都有上下限，在排版上就是上标和下标。</p><p><code>$$\sum_{k=1}^{n}\frac{1}{k}$$</code> <span class="math display">\[\sum_{k=1}^{n}\frac{1}{k}\]</span></p><p>微分符直体：<code>$$\int_a^b f(x)\mathrm{d}x$$</code> <span class="math display">\[\int_a^b f(x)\mathrm{d}x\]</span></p><ul><li>公式中的空格</li></ul><p>LaTeX 能够自动处理公式中的大多数字符之间的空格，但是有时候需要自己手动进行控制。</p><table><thead><tr class="header"><th>命令</th><th>释义</th><th>显示</th></tr></thead><tbody><tr class="odd"><td><code>$a\!b$</code></td><td>紧贴</td><td><span class="math inline">\(a\!b\)</span></td></tr><tr class="even"><td><code>$ab$</code></td><td>没有空格</td><td><span class="math inline">\(ab\)</span></td></tr><tr class="odd"><td><code>$a\,b$</code></td><td>小空格</td><td><span class="math inline">\(a\,b\)</span></td></tr><tr class="even"><td><code>$a\;b$</code></td><td>中等空格</td><td><span class="math inline">\(a\;b\)</span></td></tr><tr class="odd"><td><code>$ab$</code></td><td>大空格</td><td><span class="math inline">\(a\ b\)</span></td></tr><tr class="even"><td><code>$a\quad b$</code></td><td>quad空格</td><td><span class="math inline">\(a\quad b\)</span></td></tr><tr class="odd"><td><code>$a\qquad b$</code></td><td>两个quad空格</td><td><span class="math inline">\(a\qquad b\)</span></td></tr></tbody></table><ul><li>西文字符转换表</li></ul><table><thead><tr class="header"><th>命令</th><th>释义</th><th></th><th>命令</th><th>释义</th></tr></thead><tbody><tr class="odd"><td><code>rm</code></td><td>罗马字体</td><td></td><td><code>\it</code></td><td>意大利字体</td></tr><tr class="even"><td><code>\bf</code></td><td>黑体</td><td></td><td><code> \sl</code></td><td>倾斜体</td></tr><tr class="odd"><td><code>\sf</code></td><td>等线体</td><td></td><td><code> \sc</code></td><td>小体大写字母</td></tr><tr class="even"><td><code>\tt</code></td><td>打字机字体</td><td></td><td><code>\mit</code></td><td>数学斜体</td></tr><tr class="odd"><td><code>\cal</code></td><td>数学中花体字母</td><td></td><td></td><td></td></tr></tbody></table><ul><li>公式中的定界符</li></ul><p>这里所谓的定界符是指包围或分割公式的一些符号</p><p><code>$($    %(</code></p><p><code>$)$    %)</code></p><p><code>$[$    %[</code></p><p><code>$]$    %]</code></p><p><code>$\{$    %{</code></p><p><code>$\}$    %}</code></p><p><code>$|$    %|</code></p><p><code>$\|$    %||</code></p><p>在上述这些定界符之前冠以 <code>\left</code>（修饰左定界符）或 <code>\right</code>（修饰右定界符），可以得到自适应缩放的定界符，它们会根据定界符所包围的公式大小自适应缩放。</p><p><code>$$\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)$$</code></p><p><span class="math display">\[\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)\]</span></p><ul><li>矩阵</li></ul><p>对于少于 10 列的矩阵，可使用<code>matrix</code>，<code>pmatrix</code>，<code>bmatrix</code>，<code>Bmatrix</code>，<code>vmatrix</code> 和<code>Vmatrix</code> 等环境。</p><p><code>$$\begin{matrix}1 &amp; 2\\3 &amp;4\end{matrix}$$</code> <span class="math display">\[\begin{matrix}1 &amp; 2\\3 &amp;4\end{matrix}\]</span></p><p><code>$$\begin{pmatrix}1 &amp; 2\\3 &amp;4\end{pmatrix}$$</code> <span class="math display">\[\begin{pmatrix}1 &amp; 2\\3 &amp;4\end{pmatrix}\]</span></p><p><code>$$\begin{bmatrix}1 &amp; 2\\3 &amp;4\end{bmatrix}$$</code> <span class="math display">\[\begin{bmatrix}1 &amp; 2\\3 &amp;4\end{bmatrix}\]</span></p><p><code>$$\begin{Bmatrix}1 &amp; 2\\3 &amp;4\end{Bmatrix}$$</code> <span class="math display">\[\begin{Bmatrix}1 &amp; 2\\3 &amp;4\end{Bmatrix}\]</span></p><p><code>$$\begin{vmatrix}1 &amp; 2\\3 &amp;4\end{vmatrix}$$</code> <span class="math display">\[\begin{vmatrix}1 &amp; 2\\3 &amp;4\end{vmatrix}\]</span></p><p><code>$$\begin{Vmatrix}1 &amp; 2\\3 &amp;4\end{Vmatrix}$$</code> <span class="math display">\[\begin{Vmatrix}1 &amp; 2\\3 &amp;4\end{Vmatrix}\]</span></p><ul><li>排版数组</li></ul><p>当矩阵规模超过 10 列，或者上述矩阵类型不敷需求，可使用 <code>array</code> 环境。该环境可把一些元素排列成横竖都对齐的矩形阵列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\mathbf&#123;X&#125; =</div><div class="line">\left( \begin&#123;array&#125;&#123;ccc&#125;</div><div class="line">x_&#123;11&#125; &amp; x_&#123;12&#125; &amp; \ldots \\</div><div class="line">x_&#123;21&#125; &amp; x_&#123;22&#125; &amp; \ldots \\</div><div class="line">\vdots &amp; \vdots &amp; \ddots</div><div class="line">\end&#123;array&#125; \right)</div><div class="line">$$</div></pre></td></tr></table></figure><p><span class="math display">\[\mathbf{X} =\left( \begin{array}{ccc}x_{11} &amp; x_{12} &amp; \ldots \\x_{21} &amp; x_{22} &amp; \ldots \\\vdots &amp; \vdots &amp; \ddots\end{array} \right)\]</span></p><p><code>\mathbf</code>大写控制符，<code>\\</code>表示换行，<code>{ccc}</code>表示列样式。<code>array</code> 环境也可以用来排版这样的表达式，表达式中使用一个<code>.</code> 作为其隐藏的<code>\right</code>定界符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">y = \left\&#123; \begin&#123;array&#125;&#123;ll&#125;</div><div class="line">a &amp; \textrm&#123;if $d&gt;c$&#125;\\</div><div class="line">b+x &amp; \textrm&#123;in the morning&#125;\\</div><div class="line">l &amp; \textrm&#123;all day long&#125;</div><div class="line">\end&#123;array&#125; \right.</div><div class="line">$$</div></pre></td></tr></table></figure><p><span class="math display">\[y = \left\{ \begin{array}{ll}a &amp; \textrm{if $d&gt;c$}\\b+x &amp; \textrm{in the morning}\\l &amp; \textrm{all day long}\end{array} \right.\]</span></p><ul><li>也可以在<code>array</code>环境中画线，如分隔矩阵中元素。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line">\left(\begin&#123;array&#125;&#123;c|c&#125;</div><div class="line">1 &amp; 2 \\</div><div class="line">\hline</div><div class="line">3 &amp; 4</div><div class="line">\end&#123;array&#125;\right)</div><div class="line">$$</div></pre></td></tr></table></figure><p><span class="math display">\[\left(\begin{array}{c|c}1 &amp; 2 \\\hline3 &amp; 4\end{array}\right)\]</span></p><h2 id="基本latex公式命令">基本LaTeX 公式命令</h2><h3 id="希腊字母">希腊字母</h3><table><thead><tr class="header"><th align="left">命令</th><th align="center">显示</th></tr></thead><tbody><tr class="odd"><td align="left"><code>\alpha</code></td><td align="center"><span class="math inline">\(\alpha\)</span></td></tr><tr class="even"><td align="left"><code>\beta</code></td><td align="center"><span class="math inline">\(\beta\)</span></td></tr><tr class="odd"><td align="left"><code>\gamma</code></td><td align="center"><span class="math inline">\(\gamma\)</span></td></tr><tr class="even"><td align="left"><code>\delta</code></td><td align="center"><span class="math inline">\(\delta\)</span></td></tr><tr class="odd"><td align="left"><code>\zeta</code></td><td align="center"><span class="math inline">\(\zeta\)</span></td></tr><tr class="even"><td align="left"><code>\epsilon</code></td><td align="center"><span class="math inline">\(\epsilon\)</span></td></tr><tr class="odd"><td align="left"><code>\eta</code></td><td align="center"><span class="math inline">\(\eta\)</span></td></tr><tr class="even"><td align="left"><code>\theta</code></td><td align="center"><span class="math inline">\(\theta\)</span></td></tr><tr class="odd"><td align="left"><code>\iota</code></td><td align="center"><span class="math inline">\(\iota\)</span></td></tr><tr class="even"><td align="left"><code>\kappa</code></td><td align="center"><span class="math inline">\(\kappa\)</span></td></tr><tr class="odd"><td align="left"><code>\lambda</code></td><td align="center"><span class="math inline">\(\lambda\)</span></td></tr><tr class="even"><td align="left"><code>\mu</code></td><td align="center"><span class="math inline">\(\mu\)</span></td></tr><tr class="odd"><td align="left"><code>\xi</code></td><td align="center"><span class="math inline">\(\xi\)</span></td></tr><tr class="even"><td align="left"><code>\nu</code></td><td align="center"><span class="math inline">\(\nu\)</span></td></tr><tr class="odd"><td align="left"><code>\pi</code></td><td align="center"><span class="math inline">\(\pi\)</span></td></tr><tr class="even"><td align="left"><code>\rho</code></td><td align="center"><span class="math inline">\(\rho\)</span></td></tr><tr class="odd"><td align="left"><code>\sigma</code></td><td align="center"><span class="math inline">\(\sigma\)</span></td></tr><tr class="even"><td align="left"><code>\tau</code></td><td align="center"><span class="math inline">\(\tau\)</span></td></tr><tr class="odd"><td align="left"><code>\upsilon</code></td><td align="center"><span class="math inline">\(\upsilon\)</span></td></tr><tr class="even"><td align="left"><code>\phi</code></td><td align="center"><span class="math inline">\(\phi\)</span></td></tr><tr class="odd"><td align="left"><code>\chi</code></td><td align="center"><span class="math inline">\(\chi\)</span></td></tr><tr class="even"><td align="left"><code>\psi</code></td><td align="center"><span class="math inline">\(\psi\)</span></td></tr><tr class="odd"><td align="left"><code>\omega</code></td><td align="center"><span class="math inline">\(\omega\)</span></td></tr></tbody></table><ul><li>如果使用大写的希腊字母，把命令的首字母变成大写即可，例如 <code>\Gamma</code> 输出的是 <span class="math inline">\(\Gamma\)</span>。</li><li>如果使用斜体大写希腊字母，再在大写希腊字母的<em>LaTeX</em>命令前加上<em>var</em>，例如<code>\varGamma</code> 生成 <span class="math inline">\(\varGamma\)</span>。</li></ul><p><strong>eg.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$$</div><div class="line"> \varGamma(x) = \frac&#123;\int_&#123;\alpha&#125;^&#123;\beta&#125; g(t)(x-t)^2\text&#123; d&#125;t &#125;&#123;\phi(x)\sum_&#123;i=0&#125;^&#123;N-1&#125; \omega_i&#125; \tag&#123;2&#125;</div><div class="line">$$</div></pre></td></tr></table></figure><p>生成如下结果： <span class="math display">\[\varGamma(x) = \frac{\int_{\alpha}^{\beta} g(t)(x-t)^2\text{ d}t }{\phi(x)\sum_{i=0}^{N-1} \omega_i} \tag{2}\]</span></p><h3 id="和号和积分号">和号和积分号</h3><table><thead><tr class="header"><th align="left">命令</th><th align="left">显示</th></tr></thead><tbody><tr class="odd"><td align="left"><code>\sum</code></td><td align="left"><span class="math inline">\(\sum\)</span></td></tr><tr class="even"><td align="left"><code>\int</code></td><td align="left"><span class="math inline">\(\int\)</span></td></tr><tr class="odd"><td align="left"><code>\sum_{i=1}^{N}</code></td><td align="left"><span class="math inline">\(\sum_{i=1}^{N}\)</span></td></tr><tr class="even"><td align="left"><code>\int_{a}^{b}</code></td><td align="left"><span class="math inline">\(\int_{a}^{b}\)</span></td></tr><tr class="odd"><td align="left"><code>\prod</code></td><td align="left"><span class="math inline">\(\prod\)</span></td></tr><tr class="even"><td align="left"><code>\iint</code></td><td align="left"><span class="math inline">\(\iint\)</span></td></tr><tr class="odd"><td align="left"><code>\prod_{i=1}^{N}</code></td><td align="left"><span class="math inline">\(\prod_{i=1}^{N}\)</span></td></tr><tr class="even"><td align="left"><code>\iint_{a}^{b}</code></td><td align="left"><span class="math inline">\(\iint_{a}^{b}\)</span></td></tr><tr class="odd"><td align="left"><code>\bigcup</code></td><td align="left"><span class="math inline">\(\bigcup\)</span></td></tr><tr class="even"><td align="left"><code>\bigcap</code></td><td align="left"><span class="math inline">\(\bigcap\)</span></td></tr><tr class="odd"><td align="left"><code>\bigcup_{i=1}^{N}</code></td><td align="left"><span class="math inline">\(\bigcup_{i=1}^{N}\)</span></td></tr><tr class="even"><td align="left"><code>\bigcap_{i=1}^{N}</code></td><td align="left"><span class="math inline">\(\bigcap_{i=1}^{N}\)</span></td></tr></tbody></table><h3 id="其它常用命令">其它常用命令</h3><table><thead><tr class="header"><th>命令</th><th>显示</th></tr></thead><tbody><tr class="odd"><td><code>\sqrt[3]{2}</code></td><td><span class="math inline">\(\sqrt[3]{2}\)</span></td></tr><tr class="even"><td><code>\sqrt{2}</code></td><td><span class="math inline">\(\sqrt{2}\)</span></td></tr><tr class="odd"><td><code>x^{3}</code></td><td><span class="math inline">\(x^{3}\)</span></td></tr><tr class="even"><td><code>x_{3}</code></td><td><span class="math inline">\(x_{3}\)</span></td></tr><tr class="odd"><td><code>\lim_{x \to 0}</code></td><td><span class="math inline">\(\lim_{x \to 0}\)</span></td></tr><tr class="even"><td><code>\frac{1}{2}</code></td><td><span class="math inline">\(\frac{1}{2}\)</span></td></tr></tbody></table><blockquote><p><strong>注意</strong>：上标和下标在只有一个字符时，可以不用中括号: <code>x^2</code>和<code>x^{2}</code>的结果都是 <span class="math inline">\(x^2\)</span></p></blockquote><h3 id="数学符号的修饰">数学符号的修饰</h3><table><thead><tr class="header"><th>命令</th><th>释义</th><th>显示</th></tr></thead><tbody><tr class="odd"><td><code>\overline{数学公式}</code></td><td>上划线</td><td><span class="math inline">\(\overline{数学公式}\)</span></td></tr><tr class="even"><td><code>\underline{数学公式}</code></td><td>下划线</td><td><span class="math inline">\(\underline{数学公式}\)</span></td></tr><tr class="odd"><td><code>\overbrace{数学表达式}</code></td><td>俯卧式花括号</td><td><span class="math inline">\(\overbrace{数学表达式}\)</span></td></tr><tr class="even"><td><code>\underbrace{数学表达式}</code></td><td>仰卧式花括号</td><td><span class="math inline">\(\underbrace{数学表达式}\)</span></td></tr></tbody></table><h2 id="latex学术写作">LaTeX学术写作</h2><p>目前<em>markdown</em>语法对于<em>LaTeX</em>的支持比较有限，主要是公式语法，对于论文写作的语法支持很少。</p><p><span class="math inline">\(\title[LaTeX公式语法]{markdown中对于LaTeX语法的支持}\)</span></p><p><span class="math inline">\(\subtitle{subtitle here}\)</span></p><p><span class="math inline">\(\author[Laphi\;Lee]{Laphi Lee}\)</span></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;latex学习&quot;&gt;LaTeX学习&lt;/h1&gt;
&lt;p&gt;如果你平时的写作中会遇到数学公式，而你又是使用的markdown编辑器，那么，本文适合你。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要介绍LaTex数学排版在MarkDown语法中的使用。如果您需要的是更详尽的LaTeX论文排版等，请查阅相关专业资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;TEX&lt;/em&gt; 是Donald E. Knuth 编写的一个以排版文章及数学公式为目标的计算机程序。TEX的版本号不断趋近于&lt;em&gt;π&lt;/em&gt;，现在为3.141592。由Pascal 语言写成，特点: &lt;strong&gt;免费、输出质量高、擅长科技排版、有点像编程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;LATEX&lt;/em&gt; 目前使用最广泛的TEX 宏集。 每一个&lt;em&gt;LATEX&lt;/em&gt; 命令实际上最后都会被转换解释成几个甚至上百个TEX命令。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.laphilee.com/categories/technology/"/>
    
    
      <category term="LaTeX" scheme="http://www.laphilee.com/tags/LaTeX/"/>
    
      <category term="LaTeX学习" scheme="http://www.laphilee.com/tags/LaTeX%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="LaTeX markdown" scheme="http://www.laphilee.com/tags/LaTeX-markdown/"/>
    
      <category term="Latex md" scheme="http://www.laphilee.com/tags/Latex-md/"/>
    
  </entry>
  
  <entry>
    <title>git拾遗</title>
    <link href="http://www.laphilee.com/git_mine.html"/>
    <id>http://www.laphilee.com/git_mine.html</id>
    <published>2017-07-25T03:03:59.000Z</published>
    <updated>2017-09-14T06:41:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些git中非常有用且自己又容易忘记的命令，仅供参考。</p><h2 id="github上fork代码后从自己的代码库拉下代码如何保持自己库中的代码和原代码的更新保持一致呢">github上fork代码后，从自己的代码库拉下代码。如何保持自己库中的代码和原代码的更新保持一致呢？</h2><p><em>步骤：</em></p><ol style="list-style-type: decimal"><li>在 Fork 的代码库中添加上游代码库的 remote 源，该操作只需操作一次即可。</li></ol><p>如: 其中 <code>upstream</code> 表示上游代码库名， 可以任意。</p><p><code>git remote add {upstream} git@github.com:spring-projects/spring-framework.git</code></p><ol style="list-style-type: decimal"><li>将本地的修改提交 commit</li></ol><p><a id="more"></a></p><ol start="2" style="list-style-type: decimal"><li>在每次 Pull Request 前做如下操作，即可实现和上游版本库的同步。</li></ol><p>​ 3.1 ： <code>git remote update upstream</code></p><p>​ 3.2 ： <code>git rebase upstream/{branch name}</code></p><p>需要注意的是在操作3.2之前，一定要将checkout到{branch name}所指定的branch，</p><p>如: git checkout develop</p><ol style="list-style-type: decimal"><li>push 代码到 github</li></ol><p>​ <code>git push origin {branch name}</code></p><h2 id="git在本地新建分支并与远程库建立关联的几种方法">git在本地新建分支并与远程库建立关联的几种方法</h2><ul><li><p><strong><code>git checkout --track origin/remote_branch</code>（推荐）</strong></p></li><li><p>基于远程分支“remote_branch”，创建一个叫“remote_branch”的本地分支。</p></li></ul><p><code>git checkout -b remote_branch origin/remote_branch</code></p><ul><li><p><code>git clone -b {remote_branch} git@github.com:spring-projects/spring-framework.git</code></p></li><li><p><code>git branch remote_branch</code> , <code>git checkout remote_branch</code>, <code>git pull origin remote_branch</code></p></li><li><ol class="example" style="list-style-type: decimal"><li><code>git branch --set-upstream-to=origin/&lt;branch&gt; {remote_branch}</code></li></ol></li></ul><h2 id="git设置提交代码时显示的提交人信息">git设置提交代码时显示的提交人信息</h2><p><code>git config —global user.name laphi</code></p><p><code>git config —global user.email laphi@laphilee.com</code></p><p>生成git帐号关联邮箱的rsa：<code>git ssh-keygen -t rsa -C laphi@laphilee.com</code>。</p><blockquote><p>这里不强制要求用git生成rsa，直接用不和邮箱信息关联的rsa也完全可以。</p></blockquote><h2 id="git删除远程分支">git删除远程分支</h2><p>如果一不小心把本地的临时分支push到server上去了，想要删除。怎么办？</p><p>用<code>git branch -r -d origin/branch-name</code>只是删除的本地对该远程分支的track，不能删除远程服务器（如github，gitlab等）上的该分支。正确的方法应该是这样：<code>git push origin :branch-name</code>冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支。</p><p>或者用命令<code>git push origin --delete &lt;branchName&gt;</code></p><h2 id="删除不存在对应远程分支的本地分支">删除不存在对应远程分支的本地分支</h2><p>假设这样一种情况：</p><ol style="list-style-type: decimal"><li>我创建了本地分支b1并pull到远程分支 <code>origin/b1</code>；</li><li>其他人在本地使用fetch或pull创建了本地的b1分支；</li><li>我删除了 <code>origin/b1</code> 远程分支；</li><li>其他人再次执行fetch或者pull并不会删除这个他们本地的 <code>b1</code> 分支，运行 <code>git branch -a</code> 也不能看出这个branch被删除了，如何处理？</li></ol><p>使用下面的代码查看b1的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git remote show origin</div><div class="line">* remote origin</div><div class="line">  Fetch URL: git@github.com:xxx/xxx.git</div><div class="line">  Push  URL: git@github.com:xxx/xxx.git</div><div class="line">  HEAD branch: master</div><div class="line">  Remote branches:</div><div class="line">    master                 tracked</div><div class="line">    refs/remotes/origin/b1 stale (use &apos;git remote prune&apos; to remove)</div><div class="line">  Local branch configured for &apos;git pull&apos;:</div><div class="line">    master merges with remote master</div><div class="line">  Local ref configured for &apos;git push&apos;:</div><div class="line">    master pushes to master (up to date)</div></pre></td></tr></table></figure><p>这时候能够看到b1是stale的，使用 <code>git remote prune origin</code> 可以将其从本地版本库中去除。</p><p>更简单的方法是使用这个命令，它在fetch之后删除掉没有与远程分支对应的本地分支：</p><p><code>git fetch -p</code></p><h2 id="重命名远程分支">重命名远程分支</h2><p>在Git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xiaosi@Q:~/code/qt$ git branch -av</div><div class="line">* dev                                            8d807de MOD  </div><div class="line">master                                         f600e50 code change during build  remotes/origin/HEAD                            -&gt; origin/master  remotes/origin/dev                             8d807de MOD  remotes/origin/master                          f600e50 code change during build</div></pre></td></tr></table></figure><p>删除远程分支：<code>git push --delete origin dev</code> 重命名本地分支：<code>git branch -m dev develop</code> 推送本地分支：<code>git push origin develop</code></p><h2 id="设置git区分文件名大小写">设置git区分文件名大小写</h2><p>git 默认是不区分文件名大小写的，当我们不小心把文件名的大小写写错了，想改过来，会发现push不起作用。</p><p>譬如当你创建一个文件后，叫 <em>readme.md</em> 写入内容后 提交到线上代码仓库。然后你在本地修改文件名为<em>Readme.md</em> 接着你去提交，发现代码没有变化.<code>git status</code>无任何提示信息。</p><p>这里有两种解决方法</p><ol style="list-style-type: decimal"><li><p><strong>配置git使其对文件名大小写敏感</strong>：<code>git config core.ignorecase false</code></p></li><li><p>在本地仓库把文件删除，提交，然后push到远程仓库，然后再在本地重新添加正确文件名的文件，然后再push。</p></li></ol><p>删除</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm readme.md</div></pre></td></tr></table></figure></p><p>push到远程仓库</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m 'readme.md'</div><div class="line">git push origin &lt;my_branch&gt;</div></pre></td></tr></table></figure></p><p>重新添加</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add Readme.md</div></pre></td></tr></table></figure></p><p>提交</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m 'Readme.md'</div><div class="line">git push origin &lt;my_branch&gt;</div></pre></td></tr></table></figure></p><p>这里推荐使用第一种方法，一劳永逸。</p><h2 id="rebase">rebase</h2><h3 id="使用rebase和其他分支直接合并不推荐会有很多冲突">使用rebase和其他分支直接合并（不推荐，会有很多冲突）</h3><p>假设你现在基于远程分支“origin”，创建一个叫“mywork”的分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b mywork origin</div></pre></td></tr></table></figure><div class="figure"><img src="http://gitbook.liuhui998.com/assets/images/figure/rebase0.png" alt="img"><p class="caption">img</p></div><p>现在我们在这个分支做一些修改，然后生成两个提交(commit).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vi file.txt</div><div class="line">$ git commit</div><div class="line">$ vi otherfile.txt</div><div class="line">$ git commit</div><div class="line">...</div></pre></td></tr></table></figure><p>但是与此同时，有些人也在“origin”分支上做了一些修改并且做了提交了. 这就意味着“origin”和“mywork”这两个分支各自“前进”了，它们之间“分叉”了。</p><div class="figure"><img src="http://gitbook.liuhui998.com/assets/images/figure/rebase1.png" alt="img"><p class="caption">img</p></div><p>在这里，你可以用“pull”命令把“origin”分支上的修改拉下来并且和你的修改合并； 结果看起来就像一个新的“合并的提交”(merge commit):</p><div class="figure"><img src="http://gitbook.liuhui998.com/assets/images/figure/rebase2.png" alt="img"><p class="caption">img</p></div><p>但是，如果你想让“mywork”分支历史看起来像没有经过任何合并一样，你也许可以用 <a href="http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html" target="_blank" rel="external">git rebase</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout mywork</div><div class="line">$ git rebase origin</div></pre></td></tr></table></figure><p>这些命令会把你的“mywork”分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到“.git/rebase”目录中),然后把“mywork”分支更新到最新的“origin”分支，最后把保存的这些补丁应用到“mywork”分支上。</p><div class="figure"><img src="http://gitbook.liuhui998.com/assets/images/figure/rebase3.png" alt="img"><p class="caption">img</p></div><p>当’mywork’分支更新之后，它会指向这些新创建的提交(commit),而那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除. （请查看 <a href="http://www.kernel.org/pub/software/scm/git/docs/git-gc.html" target="_blank" rel="external">git gc</a>)</p><div class="figure"><img src="http://gitbook.liuhui998.com/assets/images/figure/rebase4.png" alt="img"><p class="caption">img</p></div><p>现在我们可以看一下用合并(merge)和用rebase所产生的历史的区别：</p><div class="figure"><img src="http://gitbook.liuhui998.com/assets/images/figure/rebase5.png" alt="img"><p class="caption">img</p></div><p>在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用<code>git-add</code>命令去更新这些内容的索引(index), 然后，你无需执行 <code>git-commit</code>,只要执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase --continue</div></pre></td></tr></table></figure><p>这样git会继续应用(apply)余下的补丁。</p><p>在任何时候，你可以用<code>--abort</code>参数来终止rebase的行动，并且“mywork” 分支会回到rebase开始前的状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase --abort</div></pre></td></tr></table></figure><h3 id="使用rebase来合并当前分支commit然后再和其他分支merge推荐">使用rebase来合并当前分支commit，然后再和其他分支merge（推荐）</h3><ol style="list-style-type: decimal"><li><code>git rebase -i HEAD~8</code></li></ol><p>合并最近的8次commit。</p><ol start="2" style="list-style-type: decimal"><li><code>git rebase -i i870cs</code></li></ol><p>“i870cs” 为不参与合并的最后一个commit</p><p><em>注：commit排序为倒序。即最新的commit在最上面。</em></p><p>从第二行开始，将<code>pick</code>改为<code>s</code>(s, squash = use commit, but meld into previous commit )</p><p>wq保存并退出。</p><p>如果有冲突，修改冲突后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .  </div><div class="line">git rebase --continue</div></pre></td></tr></table></figure><p>如果想放弃rebase，执行<code>git rebase --abort</code></p><p>将rebase同步到远程：<code>git push origin &lt;your-branch&gt;</code></p><h2 id="标签tag">标签（tag）</h2><blockquote><p>当代码写到一个里程碑版本的时候，为了方便日后查看版本以及代码回滚，这时候需要打tag</p></blockquote><p>创建标签：<code>git tag -a v20170725 -m &quot;打标签&quot;</code></p><p>或者根据指定的commit打tag：<code>git tag -a v20170725 -m &quot;打标签&quot; dd98asd</code></p><p>将标签同步到远程(和操作普通分支没有区别)：<code>git push origin v20170725</code></p><p>查看所有标签列表：<code>git tag</code></p><p>可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tag v20170725</div><div class="line">Tagger: laphi &lt;laphi@laphilee.com&gt;</div><div class="line">Date:   Tue Jul 25 09:39:27 2017 +0800</div><div class="line"></div><div class="line">我的tag</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一些git中非常有用且自己又容易忘记的命令，仅供参考。&lt;/p&gt;
&lt;h2 id=&quot;github上fork代码后从自己的代码库拉下代码如何保持自己库中的代码和原代码的更新保持一致呢&quot;&gt;github上fork代码后，从自己的代码库拉下代码。如何保持自己库中的代码和原代码的更新保持一致呢？&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;步骤：&lt;/em&gt;&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;在 Fork 的代码库中添加上游代码库的 remote 源，该操作只需操作一次即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如: 其中 &lt;code&gt;upstream&lt;/code&gt; 表示上游代码库名， 可以任意。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote add {upstream} git@github.com:spring-projects/spring-framework.git&lt;/code&gt;&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;将本地的修改提交 commit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.laphilee.com/categories/technology/"/>
    
    
      <category term="git" scheme="http://www.laphilee.com/tags/git/"/>
    
      <category term="git拾遗" scheme="http://www.laphilee.com/tags/git%E6%8B%BE%E9%81%97/"/>
    
      <category term="常用git命令" scheme="http://www.laphilee.com/tags/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    
      <category term="git学习" scheme="http://www.laphilee.com/tags/git%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>钓鱼&amp;天气</title>
    <link href="http://www.laphilee.com/fishing_1.html"/>
    <id>http://www.laphilee.com/fishing_1.html</id>
    <published>2017-07-03T07:51:42.000Z</published>
    <updated>2017-09-14T06:44:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><em>转载一个老钓鱼人的总结</em></p></blockquote><p>说到钓鱼，就一定要谈论技巧，据我了解有四点最重要。即“善观气候、选准钓位、钓组合理、饵料对路”，分述如下。</p><h2 id="一善观气候">一、善观气候</h2><p>俗语说：“打鱼不问风浪事，焉能打得大鱼回。”垂钓也不例外，寒暑阴阳，风雨水流都直接影响钓鱼效果。</p><a id="more"></a><p>在一年中，“清明”和“霜降”两个节气冷暖适中好钓鱼。但绝非仅有这两个节气能钓到鱼，不同的季节采取不同的方法并对准不同时段亦可开竿取得好钓绩。从总体上看：</p><p>春钓一天，夏钓早晚，秋钓黄昏，冬钓午间；</p><p>钓阴不钓阳，钓暗不钓明，鱼类对光线比较敏感，它们为避开天敌形成喜阴怕阳和爱清静的习性，为此必须注意阴阳、明暗的变化。</p><p>这里说的阴阳、明暗有双重含义：一是阴天比晴天好钓；二是除冬天外，夜间比白天好钓，但有些鱼如鲢鳙、草鱼、鱤鱼则靠白天钓获，夜间则与之相反。盛春初夏，繁花似锦，百业俱兴，亦是钓鱼的大好时光，但在这一时段气候尤为多变，出门垂钓更要善观气候变化。</p><h3 id="六个气候变化要注意">六个气候变化要注意</h3><ul><li>“房潮有雾切莫赶路”整天远山和高大建筑物群笼罩在浓雾之中，能见度低，同时居家平房板石地面及水泥地或高楼底层地面潮湿，墙壁”冒汗”，布满水珠的反潮天气，气压低不宜出门垂钓。</li><li>“雾退见山赶快下竿”在连续数天山边及高大建筑物云雾连天，突然天高气爽，又是阴天或多云天气，此时出门垂钓必有重大收获，故有“远山看得清，钓鱼无暇吃点心”的传云。</li><li>“暴冷暴热不出门，天气突变不垂钓”譬如久雨突然放晴或久晴暴雨突袭，这时水温急剧变化，鱼类不适应，垂钓效果必然欠佳。</li></ul><p>此外还要注意另外两种现象：一种是<strong>“暴风骤雨你莫钓，风雨过后总丰收”</strong>。这里着重指的是台风多发季节，刮台风时不但难开竿放钓，且鱼类潜入深水避风，要等风停，水面清静或细雨蒙蒙，十拿九稳喜获丰收；二是<strong>“雷雨离钓场，雨中不下竿”</strong>。垂钓多在空旷、临山及平原大水面等区域，这些地方往往是雷区，且近年来多数钓友采用碳素钓竿属导电体，雨中易遭雷击极度危险，同时鱼也怕雷，冒雨垂钓也是白忙，以暂离钓位为宜。</p><ul><li>“雨中水面冒蒸气，下竿垂钓最有利”尤其初春，细雨蒙蒙，水面热气腾腾，下雨溶氧，水里温度高，增进鱼类食欲是难得的钓鱼好时期，不可错过。</li><li>“水中冒泡泡，大鱼小鱼都好钓”这是钓者熟知的道理，鱼冒泡泡，是鱼类寻觅的一种讯号，春末初夏尤为常见，即时好钓鱼。但在这段时间冒沼气亦较为常见，为此要分清鱼泡泡与沼气泡。鱼泡泡：泡粒较小，多在两个或数个以上，如鲫、鳊等;鲤鱼、鲇鱼爱拱泥，呈现成片泡泡有其独特之处；沼气泡一般单个、粒体大。同时冒沼气时，水面较常见有胶状水膜或从水底向水面悬浮块状似如青苔物质，下风口最明显，这种自然现象是由水变质冒沼气，水中必缺氧，鱼类懒于觅食，要善断，把沼气泡误为鱼泡泡垂钓必空忙。</li><li>“鱼儿水面跳，远近都好钓”鱼儿水面跳春夏较为常见，无论池塘、湖泊、库区鱼儿水面戏耍跳跃，觅食积极，近钓远钓两相宜，必获好钓绩。但亦要严格识别“鱼浮头”的现象，“鱼儿水面张口，垂钓必空手”，鱼儿水面张口是由水中缺氧所致，一般先是鲢鱼、草鱼、鳊鱼，特别鲫鱼、罗非鱼、鳙鱼成群在水面张口，水中缺氧尤为厉害，这时鱼类自命不保，怎想觅食，除非钩鱼，垂钓定无所获。另有一种情况，清晨碰到河虾在水面浮游及成群堆集岸边及杂草边，亦是鱼难钓的时段，要等河虾沉入水中方可开竿，但当天往往鱼咬钩不太积极。</li></ul><h3 id="刮什么风也会直接影响">刮什么风也会直接影响</h3><p>除上述六点外，如下几种情况也不容忽视。首先是风向，刮什么风也会直接影响</p><ul><li>“东南风钓鱼好轻松，风起西南收竿回转”</li><li>“宁钓北风寒，不钓南风暖”</li><li>“微风好钓鱼，无风鱼难钓”</li><li>“风大钓上层，无风靠底钓”</li></ul><p>这些都要引起垂钓者注意的问题。</p><h3 id="温度更是直接的影响">温度更是直接的影响</h3><p>其次温度更是直接影响钓鱼效果。水面温度低于摄氏13度，只有到深水区域及避风的地方垂钓。温度高于摄氏35度，除了钓鲢鳙鱼、鲮鱼、草鱼例外，多数鱼类则游弋深塘，大面积水域却难以找到它们的踪影。再次温差也极为关键。“温差六和五，钓鱼好辛苦”。</p><p>一年四季温差在摄氏五度和六度之间（即曰平均温度最高温度与最低温度之间的温度为温差），水中多为缺氧天气不宜垂钓。“温差七、八、九，钓鱼归来送朋友”，温差在七、八、九度出钓必获丰收，自己吃不完只好奉送朋友，分享丰收喜悦。别看与六度只有一度之差，钓鱼效果就是不一样，见怪则不怪。对于温差也并非愈小愈好，温差小一般在寒冬与雨季，适合钓白鲫鱼、白鲦、翘嘴鱼白、鳊鲤等;温差大于10度以上，多在炎热的夏秋较为常见。</p><p>夏秋季节，“低温25℃，高温33℃，出门垂钓不空竿”，是难得钓鱼好时光。但低温上升到摄氏26度，高温升到摄氏36度以上白天鱼难钓，只有黄昏及夜钓最见成效。</p><p>天气是我们出钓制胜的法宝，象10月下旬的绵绵中小雨让很多垂钓爱好者失去垂钓的信心，也许这样的天气正是鱼欢虾乐的垂钓好时光。而11月初阳光明媚的晴好天气又激起了我们外出垂钓的欲望，虽然天气晴好但出钓的效果也许差强人意。什么样的天气鱼儿才会开心呢？什么样的天气才会带给我们垂钓之乐呢？决定垂钓天气的好坏有五大因素：温度，温差，湿度，气压，风。</p><p>温度：水温越低水中溶氧越丰富，当水温高于30度以上时水体趋于溶氧不足，水温越高水体与空气的对流越差。所以我们夏天至初秋总是觉得钓鱼找不到感觉，有时人感觉天气很凉爽但出钓效果差强人意（是由于水温没降水中缺氧）。当进入深秋后气温趋于向冷，日温差也慢慢变小，天气逐渐稳定，只要我们有时间出钓定会让我们有所收获。冬季垂钓鲫鱼往往比夏天强很多，而且个大体肥。冬季垂钓没有太阳的炽热，没有雷电暴雨大风的干扰，水温稳定溶氧丰富对垂钓利。</p><h3 id="温差对钓鱼的影响">温差对钓鱼的影响</h3><p>温差：这里主要指日温差（一日中最高温度与最低温度之差），若日温差超过10度以上鱼儿就会消耗很大一部分能量变温来达到适应环境，顺应自然，这时鱼儿觅食欲望低下还无食欲。当日温差在7度左右时鱼儿能正常觅食，对垂钓有利。</p><h3 id="湿度和钓鱼的关系">湿度和钓鱼的关系</h3><p>湿度：当空气中湿度达到100%时，空气中弥漫着大量水蒸气，水与空气的对流交换受阻，水中溶氧不足，使水体缺氧，鱼儿要消耗体力来与之抗衡，这时鱼儿觅食欲望低下还无食欲。若空气湿度在70%以上时对垂钓影响较大，只有当空气湿度小于50%才会对垂钓有利。</p><h3 id="气压对钓鱼的影响">气压对钓鱼的影响</h3><p>气压：通常指1个标准大气压值为正常气压，若低于标准大气压值为低气压天气，当低气压天气出现时由于水体内部压力相对变大空气中的氧气不能正常的溶入水体进行对流（当低气压天气严重时水底污泥中的有毒气体溢出与水体混合使水质发生改变鱼儿浮头还死亡），水中缺氧，鱼儿迫切需要的是氧而不是食物，对垂钓非常不利。只有在标准大气压值正常还趋高的天气情况下水中溶氧正常还充足，鱼儿寻觅食物的欲望强烈，对垂钓有利。</p><h3 id="风力对钓鱼影响">风力对钓鱼影响</h3><p>风：当风达到5级以上时对垂钓不利，细雨微风对垂钓有利（冬季里的雪雨寒风另当别论），由于雨水会给水体带来空气中丰富的氧气，而微风又起着捣拌机的功效使水体溶氧充足，鱼儿觅食积极。还有就是风向，风无论向什么方向吹只要一日内风向不变，水体水域中的溶氧稳定鱼就好钓，若一天中风向不停的改变着，水与空气的对流也变化着（风能吹到的地方溶氧就充足反知次之），在垂钓中反应出来就是鱼情时好时坏，若一天中风向不停的改变着，遇到这种天气对垂钓也很不利。</p><p>当我们了解了鱼与天气的的关系后，接下来我们只要了解各类型鱼在什么水域栖息，喜欢吃什么饵，做到心中有数垂钓起来就容易了。</p><p>天气变化对江，河，溪流影响较大。湖泊，大型水库次之。水面越小受天气影响越大。在垂钓中当我们遇到不利天气时我们可以选择流动的水域和大型的湖泊，水库，这样就可以机动灵活做到知已知比，方能出奇制胜。</p><p>这是我在平时垂钓中的感受和体会，还有很多地方不全面，望各位钓友一起商榷和探讨。</p><h2 id="二选准钓位">二、选准钓位</h2><h3 id="野钓鲫鱼的选位">野钓鲫鱼的选位</h3><p>其实钓鱼人都知道鲫鱼是除了白条之外最好钓的鱼。虽然其好钓的原因很多但主要有三点：</p><ul><li>鲫鱼生长繁殖力强，适应水域广，遍布我国各地无污染的淡水水域，数量上较其它淡水鱼有很大优势。</li><li>其个体较小在提竿。溜鱼等技巧上要求不高。不需要很高的钓技。</li><li>鲫鱼属杂食性，且比较贪食，因此诱饵和钓饵的配制都不很复杂，只要掌握了关键的几点就不愁钓不到鱼。</li></ul><p>之所以要谈鲫鱼的钓法并不是本人对鲫鱼有特殊的兴趣，只是因为本人虽然以有30多年的钓龄而网龄却不长。看到网上有很多初学钓鱼的人对鲫鱼感兴趣，因此想谈一谈自己多年来钓野鲫鱼的体会以供参考。</p><p>钓鲫鱼的选位和钓其它鱼是不同的。钓鲫鱼选位要选草边，岸边，选旮旮旯旯的地方。比如说在湖泊、水库等大水面钓鲫鱼要找和大水面相连的沟沟岔岔等局部小水面。如果没有沟岔就要选靠近岸边的凹处离岸不要太远，最好选在草边或者是与大水面相通的草洞，只要有适当的水深越是靠近草或岸越好，水深根据季节不同可选择0.5—3米之间（最多不超过5米）但选择岸边时，必须选择凹处，谚语云：<strong>“鲤鱼钓凸，鲫鱼钓凹”</strong>。冬天和初春可选在北岸或东岸，且离岸可稍远一点的深水。晚春就要选择潜水处。有些场合水深甚至只有0.3米只要水混也会有意想不到的钓获量（潜水钓可用4粒星漂，多了没用，以饵代坠或者用很小的铅坠。）秋季要选择南岸或西岸的背阴处只要有1—3米的水深就行，最好是找到水底深浅交界处的深水处或者斜坡的靠近坡底处效果会非常好。</p><p>就是钓草边季节不同，下钩点也不同，比如：春季应该钓草丛的南边，秋季就要钓草丛的北边，哪怕是只有一两棵草，根据季节不同选择草的向阳一侧或背阴一侧效果也会截然不同。在野钓过程中选择钓位和下钩点（钓点）非常重要，有时在同一个钓位，下钩点相差不足0.5米钓效却差距很大。特别是在水面不很大的水草溏里更是如此。</p><p>盛夏不是钓鱼的好季节，但不是不能钓，只是盛夏钓鱼无论是选位还是钓法上都要比春秋季节钓鱼更要复杂些，比如谚语中说的“早钓东，晚钓西”一般只在夏天才用的上。我说个夏季钓鱼的小门道大家不妨一试。定点打窝后，下钩时不要把钩下在窝子中间，比如你如果准备钓草边离草一尺远的地方，那么你大窝时要把窝打在离草1米远，下钩时把钩下在窝和草中间离草一尺远的地方会非常好。如果是钓岸边，要把钩下在窝的前方二尺左右的地方，其效果会比把钩下在窝子中好的多。</p><p>谚语中说的“春钓滩，夏钓潭，秋钓荫，冬钓阳。”虽然说的很好，但在实际应用中却有很多非常实际的细节问题需要注意。</p><p>我国地域辽阔960万平方公里虽然都是同一天立春，但各地的温度却差距很大。而且从立春到立夏有两个多月的时间。要说在这两个多月的时间内全国各地钓鱼都要钓滩显然是荒唐之说。所以“春钓滩”只是个广义的说法，要求更确切些就必须根据实际温度来决定。之所以要“春钓滩”的原因很多但起决定因素的只有两点：</p><ul><li><p>到了春季温度回升浅滩比深水处水温升高的要早，浅滩处的水温高于深水处的水温。</p></li><li><p>水中的各种生物经过了漫长的冬天到了水温回升的季节那里水温高就到那里去，所以鱼到水温较高的浅滩不仅可以找到更适宜自身温度的生存环境，还可以在那里找到其它浮游生物来填饱饿了一冬的辘辘饥肠。</p></li></ul><p>虽然鱼有三趋（趋温。趋氧。趋食），但在不同的季节却有主次之分：<strong>冬春季节主要趋温</strong>，要以温度为主要依据考虑选择钓位。<strong>盛夏主要趋氧</strong>，在炎热的夏天要以水中溶氧量的高低作为选择钓位的主要依据，比如选草边；</p><p><strong>选下风口</strong>。而到了秋季鱼为了储存足够的越冬脂肪要大量进食，因此主要趋食，那里食物丰富就到那里去。比如回风湾（水面上积存漂浮物多的地方）。大树下。选择岸边的大树下要看当天的风向，如果是南风就要选择南岸的树下（以次类推），若是两到三天风向不变效果更佳。“夏钓潭”也不是绝对的。比如阴雨天气或者有风的天气选择有长出水面的草旁或回风湾效果会更好。</p><p>钓鱼的选位非常重要，但也是钓鱼技术中最难掌握的一个环节，要选好一个钓位——特别是选准一个好钓点（下钩点），要根据季节、天气、风向、地形、水情、鱼情、垂钓者的多少等方方面面的因素来考虑，不可死板硬套。要在长期的垂钓活动中多留心，多总结积累经验。切不可每到一处就急忙打窝，要在选择一处钓位之后先安好竿线试探水下地形，选准了下钩点之后再决定打窝点,做到有的放矢。</p><h3 id="顺便再说几句根据天气选位">顺便再说几句根据天气选位</h3><ul><li>春季要尽量选择下风口的滩，只要不超过4级。因为下风口的水温相对较高。</li><li>夏季只要风力不超过4级也要尽量选择下风口，风力越大钓点要离岸越近，因为下风口水的溶氧量高。</li><li>秋季既要选择背阴处又要考虑选择下风口或者回风湾，因为那里的食物较多。</li><li>冬季则要选择背风处，因为下风口的水温会更低。</li></ul><p>出钓前一天听天气预报时不仅要听阴晴风雨，还要注意昼夜最大温差和气压，如果出钓当天的温差大于13度或者气压低于1004佰帕，鱼就会非常难钓，钓草边或草洞会略好些，如果用的是台钓采取漂接钓法钓半水或钓浮会好一点。下风口或者回风湾会更好。回风湾效果会更好。</p><h2 id="三钓组合理">三、钓组合理</h2><p>以重量计费的鱼池一般我是不去的，不是野钓就是钓只管不喂的低价鱼塘。这样，所遇环境往往对象鱼密度小，常常有小杂鱼。为了适应，我专门设计了一种钓组和相应的钓法。我已沿用了八年，感觉很好。</p><h3 id="钓组">钓组</h3><p>取绿色软渔线一段，用绿色是因为鱼对这种颜色不敏感，一端系一只钓钩，两钩间脑线长约30厘米。用手指从中间挑起，两钩脑线一长一短，相距5厘米左右，在手指下端部位打一个结，留出手指粗的套，用来连接主线。剪一条一厘米宽的铅皮，铅皮的重量相当于4-5目漂梢的排水量，也就是放上铅皮漂头在水面剩一目，拿下就上来4-5目。</p><p>每个钩的脑线上卷一块，长脑线上的铅皮移至短脑线钓钩的钩弯处，将铅皮卷一厘米长的中间对准钩弯顶部，用钳子夹紧。另外一个脑线上的铅皮卷在距钩柄3厘米处夹紧。然后，在套结与铅皮间的脑线上刷上101胶，作用是防止在垂钓时两脑线相互缠绕。其它结构和别的钓友没有什么区别。</p><h3 id="调漂和使用">调漂和使用</h3><p>漂我采用浮力大且目段较粗的，一般漂目直径在1.5毫米左右，夜钓时就用3毫米的。一个原因是我已花甲之年，细了看不清;主要原因是可以达到我想要的效果。调漂时，空钩不落底，漂只露一点点尖，垂钓时只露一目。甩线时，尽量往前抛，落水后漂一立起来就往后拖竿，超过正常放竿位置十多厘米。当漂不动后，把竿推到正常放竿位置。</p><p>这时水下前钩卧底，脑线上的小坠斜立，短脑线钩直立水底。这样前钩没有鱼咬钩漂无信号，后钩当鱼儿觅食时的虚假动作反映到漂上就是点动，小杂鱼逗钩也是如此。因此，鲫鱼咬钩时，只出现黑漂或者送漂两种信号，很容易看清，提高了上钩率。</p><h3 id="饵料对路">饵料对路</h3><p>有句俗语：“甩到水缸里，神仙也无戏。”意思是野钓选位是最重要的，我认为野钓中第二位的就是诱饵。我的诱饵的主要成份：三分之一小米，三分之一玉米面，三分之一麦麸。制做方法：每公斤加50克羊油和70克精盐炒熟，装好备用;使用时，在前一天晚上加适量的糖、泡制的桂皮曲酒，最后用曲酒将所有饵料浸透，这样诱饵就制成了。</p><p>这种诱饵的特点是味浓，入水后饵雾存留时间长。有人会问为什么用盐，我过去的主要业余生活是冬猎夏钓，发现一些人为了让鹿按一定规律活动，使用撒盐的办法来引导。我想山里的鹿从未见过盐，怎么会被盐吸引？鱼会不会也对盐感兴趣？当试用后我发现鱼也喜欢盐。</p><p>钓友们说我最抠，我比谁用得诱饵都少。我的投饵器是老式的，用乒乓球和自行车内胎做的。第一次投饵多一些，以后每次只是刚刚盖住乒乓球。频率根据鱼情而定，一般不超过半小时就喂一次。投饵要集中，落饵点半径不超过10厘米，我一天最多用诱饵不超过300克。我的用意是，鱼寻味而来，到窝后最醒目，最吸引鱼的是钓饵。</p><p>我用钓饵也少，有时用蚯蚓，由于好闹小鱼，一般都是面食搓饵。大的像黄豆粒，小的像高粱米粒。搓饵的硬度和压面条的面一样，甚至还要硬，挂饵时手指要感觉到钓尖。目的：</p><ul><li>减少挂饵的次数</li><li>抵挡小鱼逗钩</li><li>上鱼准确率高</li></ul><p>原料：过去用细玉米面加糖，用开水烫过蒸熟，现在是商品饵。我的体会是：在野钓中，野生鱼一般对饵不太挑剔，两种饵的差别不大。不过，商品饵更理想，更方便。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;转载一个老钓鱼人的总结&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;说到钓鱼，就一定要谈论技巧，据我了解有四点最重要。即“善观气候、选准钓位、钓组合理、饵料对路”，分述如下。&lt;/p&gt;
&lt;h2 id=&quot;一善观气候&quot;&gt;一、善观气候&lt;/h2&gt;
&lt;p&gt;俗语说：“打鱼不问风浪事，焉能打得大鱼回。”垂钓也不例外，寒暑阴阳，风雨水流都直接影响钓鱼效果。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://www.laphilee.com/categories/life/"/>
    
    
      <category term="Fishing" scheme="http://www.laphilee.com/tags/Fishing/"/>
    
      <category term="钓鱼" scheme="http://www.laphilee.com/tags/%E9%92%93%E9%B1%BC/"/>
    
      <category term="钓鱼与天气" scheme="http://www.laphilee.com/tags/%E9%92%93%E9%B1%BC%E4%B8%8E%E5%A4%A9%E6%B0%94/"/>
    
      <category term="钓鱼技巧" scheme="http://www.laphilee.com/tags/%E9%92%93%E9%B1%BC%E6%8A%80%E5%B7%A7/"/>
    
      <category term="钓位" scheme="http://www.laphilee.com/tags/%E9%92%93%E4%BD%8D/"/>
    
      <category term="调漂" scheme="http://www.laphilee.com/tags/%E8%B0%83%E6%BC%82/"/>
    
      <category term="饵料" scheme="http://www.laphilee.com/tags/%E9%A5%B5%E6%96%99/"/>
    
      <category term="野钓" scheme="http://www.laphilee.com/tags/%E9%87%8E%E9%92%93/"/>
    
  </entry>
  
  <entry>
    <title>Java Integer剖析</title>
    <link href="http://www.laphilee.com/Java-Integer.html"/>
    <id>http://www.laphilee.com/Java-Integer.html</id>
    <published>2017-06-28T15:51:10.000Z</published>
    <updated>2017-09-14T06:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-integer剖析">Java Integer剖析</h1><h2 id="获取string的整型值的方法">获取String的整型值的方法</h2><ul><li><code>public Integer valueOf(String str)</code> Java获取字符串的十进制<strong>Integer</strong>整型值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String s)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">    <span class="keyword">return</span> Integer.valueOf(parseInt(s, <span class="number">10</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>底层调用的是<code>Integer.parseInt(String s, int radix)</code>，然后通过<code>Integer.valueOf(int i)</code>将parseInt返回的int值封装成Integer对象。</p><a id="more"></a><p>注意：<code>Integer.valueOf(int i)</code>中对需要封装成Integer的int值做了缓存，常用的Integer值，默认[－128～127］可直接通过缓存获取，否则新建Integer。这样也就导致了一个Integer的自动装箱的问题，后面谈到<code>equals</code>和<code>==</code>时我们再来分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<span class="comment">//IntegerCache数组中存在，直接返回Integer 对象，否则创建新Integer对象</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然这里的缓存int的最大值是可以设置的，通过<code>java.lang.Integer.IntegerCache.high</code>属性来设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">// high value may be configured by property</span></div><div class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">        String integerCacheHighPropValue =</div><div class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">            i = Math.max(i, <span class="number">127</span>);<span class="comment">//默认最小的max值是127</span></div><div class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></div><div class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);<span class="comment">//确保cache数组的大小不超过Integer的最大限度</span></div><div class="line">        &#125;</div><div class="line">        high = h;</div><div class="line"></div><div class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];<span class="comment">//创建缓存数组，给定大小</span></div><div class="line">        <span class="keyword">int</span> j = low;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);<span class="comment">//初始化缓存数组</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>public int parseInt(String str)</code> 解析String的int值，返回int型数值</li></ul><p>parseInt(String str) ，底层调用<code>int parseInt(String s, int radix)</code>, radix默认10</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static int parseInt(String s) throws NumberFormatException &#123;</div><div class="line">    return parseInt(s,10);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>parseInt(String s, int radix)</code>的实现如下。这个方法也是很著名的<em>atoi</em>（字符串转int），面试题里面出现的概率很高——想想如果让自己写代码来实现，能否写的出来？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">*<span class="doctag">@param</span> s 要转换成int的String字符串。parseInt只接收带‘＋’，‘－’或纯数值(8进制，16进制，10进制)，不自动判断进制数, 需要靠后面的radix来指定———区别于decode(String str)</span></div><div class="line"><span class="comment">*<span class="doctag">@param</span> radix String字符串中的数字的进制数</span></div><div class="line"><span class="comment">*<span class="doctag">@return</span> 转换后的十进制数</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String s, <span class="keyword">int</span> radix)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> NumberFormatException</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line"><span class="comment">     * WARNING: This method may be invoked early during VM initialization</span></div><div class="line"><span class="comment">     * before IntegerCache is initialized. Care must be taken to not use</span></div><div class="line"><span class="comment">     * the valueOf method.</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"null"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (radix &lt; Character.MIN_RADIX) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</div><div class="line">                                        <span class="string">" less than Character.MIN_RADIX"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (radix &gt; Character.MAX_RADIX) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"radix "</span> + radix +</div><div class="line">                                        <span class="string">" greater than Character.MAX_RADIX"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, len = s.length();</div><div class="line">    <span class="keyword">int</span> limit = -Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">int</span> multmin;</div><div class="line">    <span class="keyword">int</span> digit;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">char</span> firstChar = s.charAt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (firstChar &lt; <span class="string">'0'</span>) &#123; <span class="comment">// Possible leading "+" or "-"</span></div><div class="line">            <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">                negative = <span class="keyword">true</span>;</div><div class="line">                limit = Integer.MIN_VALUE;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar != <span class="string">'+'</span>)</div><div class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="comment">// Cannot have lone "+" or "-"</span></div><div class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        multmin = limit / radix;</div><div class="line">        <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">            <span class="comment">// Accumulating negatively avoids surprises near MAX_VALUE</span></div><div class="line">            digit = Character.digit(s.charAt(i++),radix);<span class="comment">//获取char的int值</span></div><div class="line">            <span class="keyword">if</span> (digit &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (result &lt; multmin) &#123;</div><div class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">            &#125;</div><div class="line">            result *= radix;<span class="comment">//如传入String为“123”，radix为10.计算过程为i = ((-1*10 - 2)*10 - 3)*10 </span></div><div class="line">            <span class="keyword">if</span> (result &lt; limit + digit) &#123;</div><div class="line">                <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">            &#125;</div><div class="line">            result -= digit;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> NumberFormatException.forInputString(s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> negative ? result : -result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>parseInt(String s,int radix)</code>就是求<code>int radix</code>进制数<code>String s</code>的<code>radix</code>进制数是多少。</p><ul><li><code>Integer decode(String nm)</code> decode方法可以接收带有’0x’, ‘0X’, ‘#’(16进制)，‘0’(8进制)前缀的字符串，自动判断进制数，底层调用的<code>Integer.valueOf(String str, int radix)</code>——&gt;<code>Integer.parseInt(String str, int radix)</code>。</li></ul><p><code>decode(String str)</code>相对于<code>parseInt(String str, int radix)</code>多了自动判断进制数的功能，且返回值是Integer对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">decode</span><span class="params">(String nm)</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</div><div class="line">    <span class="keyword">int</span> radix = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> negative = <span class="keyword">false</span>;</div><div class="line">    Integer result;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nm.length() == <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"Zero length string"</span>);</div><div class="line">    <span class="keyword">char</span> firstChar = nm.charAt(<span class="number">0</span>);</div><div class="line">    <span class="comment">// Handle sign, if present</span></div><div class="line">    <span class="keyword">if</span> (firstChar == <span class="string">'-'</span>) &#123;</div><div class="line">        negative = <span class="keyword">true</span>;</div><div class="line">        index++;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstChar == <span class="string">'+'</span>)</div><div class="line">        index++;</div><div class="line"></div><div class="line">    <span class="comment">// Handle radix specifier, if present</span></div><div class="line">    <span class="keyword">if</span> (nm.startsWith(<span class="string">"0x"</span>, index) || nm.startsWith(<span class="string">"0X"</span>, index)) &#123;</div><div class="line">        index += <span class="number">2</span>;</div><div class="line">        radix = <span class="number">16</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nm.startsWith(<span class="string">"#"</span>, index)) &#123;</div><div class="line">        index ++;</div><div class="line">        radix = <span class="number">16</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (nm.startsWith(<span class="string">"0"</span>, index) &amp;&amp; nm.length() &gt; <span class="number">1</span> + index) &#123;</div><div class="line">        index ++;</div><div class="line">        radix = <span class="number">8</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (nm.startsWith(<span class="string">"-"</span>, index) || nm.startsWith(<span class="string">"+"</span>, index))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"Sign character in wrong position"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        result = Integer.valueOf(nm.substring(index), radix);<span class="comment">//底层调用valueOf(String str, int radix) --&gt; parseInt(String str, int radix)</span></div><div class="line">        result = negative ? Integer.valueOf(-result.intValue()) : result;</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        <span class="comment">// If number is Integer.MIN_VALUE, we'll end up here. The next line</span></div><div class="line">        <span class="comment">// handles this case, and causes any genuine format error to be</span></div><div class="line">        <span class="comment">// rethrown.</span></div><div class="line">        String constant = negative ? (<span class="string">"-"</span> + nm.substring(index))</div><div class="line">                                   : nm.substring(index);</div><div class="line">        result = Integer.valueOf(constant, radix);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Integer.getInteger(String str, Integer val);</code> 此方法用于获取系统属性的Integer值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 如果需要获取系统的属性值的话，推荐使用getInteger(String nm, Integer val)，可以省去一层调用和一个判断</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    Integer result = getInteger(nm, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">return</span> (result == <span class="keyword">null</span>) ? Integer.valueOf(val) : result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">*<span class="doctag">@param</span> nm 系统属性的名字，如"java.lang.Integer.IntegerCache.high"</span></div><div class="line"><span class="comment">*<span class="doctag">@param</span> val 获取系统属性失败的情况下的默认值</span></div><div class="line"><span class="comment">*<span class="doctag">@return</span> 属性对应的Integer值</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(String nm, Integer val)</span> </span>&#123;</div><div class="line">    String v = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        v = System.getProperty(nm);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</div><div class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> Integer.decode(v);<span class="comment">//底层调用的decode，把str解析成对应的十进制Integer</span></div><div class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> val;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="总结">总结</h3><table><colgroup><col width="9%"><col width="45%"><col width="45%"></colgroup><thead><tr class="header"><th>Atoi使用推荐</th><th>返回值Integer</th><th>返回值int</th></tr></thead><tbody><tr class="odd"><td>str是十进制</td><td><code>valueOf(String str)</code></td><td><code>parseInt(String str)</code></td></tr><tr class="even"><td>str非十进制</td><td><code>decode(String str)</code>(需解析radix) ｜<code>valueOf(String str, int radix)</code>(不需要解析radix)</td><td><code>parseInt(String str, int radix)</code>(str不能带radix标识，但可以带‘＋’、‘－’号)</td></tr></tbody></table><h3 id="integer中的其它方法">Integer中的其它方法</h3><ul><li><code>compareTo(Integer anotherInteger)</code> 比较两个Integer数值的大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* <span class="doctag">@param</span> 要比较的另一个Integer</span></div><div class="line"><span class="comment">* <span class="doctag">@return</span> 相等返回0，小于anotherInteger返回－1，大于anotherInteger返回1</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>底层使用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Integer中的equals方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</div><div class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>关于<code>equals(Object obj)</code>和<code>==</code>，自动装箱的坑</strong></p><p>前两天看到一个面试题，大体就是下面这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Integer i1 = <span class="number">10</span>, i2 = <span class="number">10</span>, i3 = <span class="number">128</span>, i4 = <span class="number">128</span>;</div><div class="line">        System.out.println(i1 == i2);</div><div class="line">        System.out.println(i1.equals(i2));</div><div class="line">        System.out.println(i3 == i4);</div><div class="line">        System.out.println(i3.equals(i4));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>看这一段代码，我第一反应就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">true</span></div></pre></td></tr></table></figure><p>结果实际执行效果是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">true</span></div><div class="line"><span class="keyword">false</span></div><div class="line"><span class="keyword">true</span></div></pre></td></tr></table></figure><p>仔细研究了一下，发现JVM在自动拆装箱的时候会调用<code>valueOf()</code>方法，让我们来看一下Integer的<code>valueOf()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注释里写明了Integer会缓存[-128, 127]之间的值，结合代码也可以看出如果Integer对象携带的整形如果是[128, 127]之间则直接返回这个Integer，否则新建一个Integer。</p><p>这个坑就显而易见了, <strong><em>Java中<code>==</code>比较的是地址</em></strong>，两个不同的对象地址显然不一样，所以会有上面令我匪夷所思的结果。  <strong>这坑让我意识到即使Java里有自动拆装箱， 也不能依赖这个特性，否则就是深渊呐，对象还是老老实实的用equals(T)比较吧</strong></p><ul><li>toString()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (i == Integer.MIN_VALUE)</div><div class="line">        <span class="keyword">return</span> <span class="string">"-2147483648"</span>;</div><div class="line">    <span class="keyword">int</span> size = (i &lt; <span class="number">0</span>) ? stringSize(-i) + <span class="number">1</span> : stringSize(i);</div><div class="line">    <span class="keyword">char</span>[] buf = <span class="keyword">new</span> <span class="keyword">char</span>[size];</div><div class="line">    getChars(i, size, buf);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相关的方法实现</p><ul><li>[ ] stringSize(int x); 返回正整数x的位数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> [] sizeTable = &#123; <span class="number">9</span>, <span class="number">99</span>, <span class="number">999</span>, <span class="number">9999</span>, <span class="number">99999</span>, <span class="number">999999</span>, <span class="number">9999999</span>,</div><div class="line">                                  <span class="number">99999999</span>, <span class="number">999999999</span>, Integer.MAX_VALUE &#125;;</div><div class="line"></div><div class="line"><span class="comment">// Requires positive x, 返回正整数x的位数</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stringSize</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; ; i++)</div><div class="line">        <span class="keyword">if</span> (x &lt;= sizeTable[i])</div><div class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getChars</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> index, <span class="keyword">char</span>[] buf)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> q, r;</div><div class="line">    <span class="keyword">int</span> charPos = index;</div><div class="line">    <span class="keyword">char</span> sign = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</div><div class="line">        sign = <span class="string">'-'</span>;</div><div class="line">        i = -i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Generate two digits per iteration</span></div><div class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">65536</span>) &#123;</div><div class="line">        q = i / <span class="number">100</span>;</div><div class="line">    <span class="comment">// really: r = i - (q * 100);</span></div><div class="line">        r = i - ((q &lt;&lt; <span class="number">6</span>) + (q &lt;&lt; <span class="number">5</span>) + (q &lt;&lt; <span class="number">2</span>));</div><div class="line">        i = q;</div><div class="line">        buf [--charPos] = DigitOnes[r];</div><div class="line">        buf [--charPos] = DigitTens[r];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Fall thru to fast mode for smaller numbers</span></div><div class="line">    <span class="comment">// assert(i &lt;= 65536, i);</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        q = (i * <span class="number">52429</span>) &gt;&gt;&gt; (<span class="number">16</span>+<span class="number">3</span>);</div><div class="line">        r = i - ((q &lt;&lt; <span class="number">3</span>) + (q &lt;&lt; <span class="number">1</span>));  <span class="comment">// r = i-(q*10) ...</span></div><div class="line">        buf [--charPos] = digits [r];</div><div class="line">        i = q;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sign != <span class="number">0</span>) &#123;</div><div class="line">        buf [--charPos] = sign;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>int signum(int i);</code> 判断i的值是否大于0，如果i是正数，返回1；i等于0，返回0；i为负数，返回-1.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">signum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">  <span class="comment">// HD, Section 2-7</span></div><div class="line">  <span class="keyword">return</span> (i &gt;&gt; <span class="number">31</span>) | (-i &gt;&gt;&gt; <span class="number">31</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="integer高级方法总结">Integer高级方法总结</h2><ul><li>//highestOneBit。保留最高位的1，同时将低位全部清零</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.println(Integer.highestOneBit(<span class="number">1023</span>));</div><div class="line">System.out.println(<span class="string">"lowest one bit: "</span> + Integer.lowestOneBit(<span class="number">12</span>));</div></pre></td></tr></table></figure></p><ul><li>//numberOfLeadingZeros。返回最高位的1之前0的个数。例如：1101000即104返回32-7=25</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"number of leading zeros: "</span> + Integer.numberOfLeadingZeros(<span class="number">104</span>));<span class="comment">//25</span></div><div class="line">System.out.println(<span class="string">"number of leading zeros: "</span> + Integer.numberOfLeadingZeros(<span class="number">2</span>));<span class="comment">//30</span></div></pre></td></tr></table></figure><ul><li>//numberOfTrailingZeros。返回最低位的1之后0的个数。例如：1101000即104返回3</li></ul><p><code>System.out.println(&quot;number of trailing zeros: &quot; + Integer.numberOfTrailingZeros(104));//3</code></p><ul><li>//reverse。反转二进制补码中位的顺序。即将第32位的值与第1位的值互换，第31位的值与第2位的值互换，等等，依次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"reverse: "</span> + Integer.toBinaryString(Integer.reverse(<span class="number">7</span>)));<span class="comment">//得11100000000，即最低位的三个一跑到最高位去了</span></div><div class="line">System.out.println(<span class="string">"reverse: "</span> + Integer.toBinaryString(Integer.reverse(<span class="number">13</span>)));<span class="comment">//得到101100000</span></div></pre></td></tr></table></figure><ul><li>//reverseBytes:将第一个字节与第四个字节的位置互换，第二个字节与第三个字节位置互换</li></ul><p><code>System.out.println(&quot;reverse bytes: &quot; + Integer.toHexString(Integer.reverseBytes(0x4835)));//打印35480000</code></p><ul><li>//rotateLeft。将i左移distance,如果distance为负，则右移-distance</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;rotate left: &quot; + Integer.rotateLeft(7, 2));//打印28</div><div class="line"></div><div class="line">System.out.println(&quot;rotate left: &quot; + Integer.rotateLeft(28, -2));//实际为向右移2，打印7</div></pre></td></tr></table></figure><ul><li>//rotateRight。将i无符号右移distance,如果distance为负，则左移-distance。负的肯定会移成正的。</li></ul><p><code>System.out.println(&quot;rotate left: &quot; + Integer.rotateRight(-7, 2));//打印28</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;java-integer剖析&quot;&gt;Java Integer剖析&lt;/h1&gt;
&lt;h2 id=&quot;获取string的整型值的方法&quot;&gt;获取String的整型值的方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public Integer valueOf(String str)&lt;/code&gt; Java获取字符串的十进制&lt;strong&gt;Integer&lt;/strong&gt;整型值&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Integer &lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; NumberFormatException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Integer.valueOf(parseInt(s, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;底层调用的是&lt;code&gt;Integer.parseInt(String s, int radix)&lt;/code&gt;，然后通过&lt;code&gt;Integer.valueOf(int i)&lt;/code&gt;将parseInt返回的int值封装成Integer对象。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.laphilee.com/categories/technology/"/>
    
    
      <category term="Java" scheme="http://www.laphilee.com/tags/Java/"/>
    
      <category term="Integer" scheme="http://www.laphilee.com/tags/Integer/"/>
    
      <category term="java源码分析" scheme="http://www.laphilee.com/tags/java%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
